//https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#

// { Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


 // } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    
    static bool comp(Job a, Job b){
        return (a.profit > b.profit);
    }
        
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here

        sort(arr,arr+n,comp);

        vector<int> res;
        int result[n];
        bool slot[n];

        for(int i=0 ;i < n ; i++) slot[i] = false;
        
        for(int i=0;i<n;i++) {
            for(int j = min(n, arr[i].dead)-1 ; j >= 0 ; j--) {
                if(slot[j] == false) {
                    // cout<<"i:"<<i<<endl;
                    result[j] = i;
                    slot[j] = true;
                    break;
                }
            }
        }
        
        int total = 0;
        int total2 = 0;
        for(int i = 0; i<n ; i++){
            if(slot[i])
            {
                total += arr[result[i]].profit;
                total2++;
                // res.push_back(arr[result[i]].id);
                // cout<<arr[result[i]].id<<endl;
            }
        }
        // cout<<total2<<" "<<total<<endl;
        res.push_back(total2);
        res.push_back(total);
        return res;
    } 
};

// { Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}


  // } Driver Code Ends
